## 16S Phylogenic Analysis
# Packages :
library(Biostrings) 
library(rBLAST) 
library(genbankr) 
library(dplyr) 
library(plyr)
library(ape) 
library(phangorn) 
library(seqRFLP)
library(ips)

#ap the following libraries should also be loaded
install.packages("rentrez")
library(rentrez)

# Working directory :
#setwd('./ColauttiLab/DAvid_scripts_toadd/')
setwd('E:/Ticks/Papers/Preliminary_16S_RNAseq_I_scapularis/August2021_microbiome/David_script_Nov2021')


#ap NCBI BLAST software must be installed first - https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/
#ap downloaded https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/ncbi-blast-2.12.0+-win64.exe Dec 1, 2021 version 2.12.0+

#ap need to set the path to the BLAST software

Sys.setenv(
  PATH = paste(
    Sys.getenv("PATH"), 
    "C:\\Program Files\\NCBI\\blast-2.12.0+\\bin", 
    sep = ";"
  )
)

#ap MUSCLE needs to be installed - v5.0.1428 - https://github.com/rcedgar/muscle/releases/download/v5.0.1428/muscle_v5.0.1428_windows.exe

#ap VCOMP140.DLL error preventing the installation of MUSCLE - so try to find work around

# 16S Blast database https://ftp.ncbi.nlm.nih.gov/blast/db/ : 
genbank_db <- blast(db="./16SMicrobialDB_16Nov21/16SMicrobialDB/16SMicrobial")
head(genbank_db)

# Samples :
samples <- readDNAStringSet('E:/Ticks/Papers/Preliminary_16S_RNAseq_I_scapularis/August2021_microbiome/tick_microbiome/16S_microbiome/20211011_core_job11.fasta')

# Target Sequence :
borrelia_target <-samples[3]

#ap need to load the functions found at the end of this script first!

# Blast :
blast_results <- blast_seq(borrelia_target, genbank_db, 50, " Borrelia Target")
head(blast_results$Seqs)

# OPTIONAL ADD EXTRA REFSEQS (Used in aPhylo (anaplasma) script):
# add1 <- readGenBank(GBAccession("HG916767.1"))
# add2 <- readGenBank(GBAccession("HG916766.1"))
# a1DF <- data.frame(Taxa=paste0(add1@definition," (",add1@accession,")"), Seqs=paste(add1@sequence))
# a2DF <- data.frame(Taxa=paste0(add2@definition," (",add2@accession,")"), Seqs=paste(add2@sequence))
# blast_results <- rbind.fill(blast_results, a1DF)
# blast_results <- rbind.fill(blast_results, a2DF)

#ap when attempting to run the MUSCLE executable there was a Windows DLL err - just as quick work around
## BiocManager::install("DECIPHER")
library(DECIPHER)
alignment <- AlignSeqs(DNAStringSet(blast_results$Seqs), anchor=NA)
alignment

names_test = blast_results$Taxa
names_test

#ap create an empty dataframe

empty = data.frame(matrix(nrow = length(names_test)))
empty
rownames(empty) = names_test
empty
colnames(empty) = "test"
empty

na.zero <- function (x) {
  x[is.na(x)] <- 1
  return(x)
}

empty1 = na.zero(empty)
empty1


#empty1 <- sapply(empty1[1:1,], as.numeric)
#empty1

## import the phyloseq object
try1 = otu_table(empty1, taxa_are_rows =T)
try1

#ap need to add the sequences from blast results to the object
blast_results$Seqs

seq_try1 = blast_results$Seqs
names(seq_try1) = names_test
seq_try2 <- Biostrings::DNAStringSet(seq_try1)
seq_try2

try2 = merge_phyloseq(try1, seq_try1)
try2

taxmat = matrix(sample(letters, 29, replace = TRUE), nrow = 29, ncol = 7)
taxmat
rownames(taxmat) <- names_test
names_test
colnames(taxmat) <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
taxmat
class(taxmat)
TAX = tax_table(taxmat)
TAX

# don't need devtools::install_github("microsud/microbiomeutilities")
# don't need library(micrbiomeutilities)

try_again = phyloseq(try1, TAX)
try_again2 = merge_phyloseq(try_again, seq_try2)
try_again2

Sys.setenv(
  PATH = paste(
    Sys.getenv("PATH"), 
    "C:\\Users\\ap180\\Downloads", 
    sep = ";"
  )
)

# Align :
seq_alignment <- align_seqs(blast_results)
#ap this pulls an error I don't think it will work unless I am logged in as adminstrator mode due to the executable


# Convert to phyloseq object :
phy_object <- convert_phyobject(alignment)

# Distance based tree :
db_tree <- optimize_db_parsimony(phy_object)

# Maximumu likelihood tree :
ml_tree <- optimize_likelihood(phy_object, db_tree) # Substitution model: GTR optimize Gamma and Inv

# Bootstrap :
bs_ml_tree <- bootstrap_tree(ml_tree, 1000, 0.01, "./MLBorrelia.pdf")

## Functions :
#Blast refseq, create DF containing Blast results
blast_seq<-function(refseq ,blastDB,hits,targetName){
  BR<-predict(blastDB, refseq) #Blast sequence against 16S database, returns up to 500 hits
  BRhitLen<-length(BR$SubjectID) #return number of blast hits
  if(BRhitLen>hits) {
    BRhitLen=hits #Limit hit length
  }
  trun_BR<<-as.vector(BR[1:BRhitLen,])
  BRSeqs <<- DNAStringSet()
  for (i in 1:nrow(trun_BR)) {
    print(i)
    temp_gb <- readGenBank(GBAccession(trun_BR$SubjectID[i]))
    temp_dss <- temp_gb@sequence
    temp_dss@ranges@NAMES <- temp_gb@definition
    BRSeqs <<- c(BRSeqs, temp_dss)
  }
  for (i in 1:length(BRSeqs)) {
    seq_length_diff <- abs(nchar(paste(refseq)) - trun_BR[i,]$Alignment.Length)
    if (seq_length_diff > 1000) {
      trun_BR[i,]$S.end <- trun_BR[i,]$S.end + seq_length_diff
    }
  }
  tree_labels <- gsub('16S .*', '',substr(BRSeqs@ranges@NAMES,13,nchar(BRSeqs@ranges@NAMES)))
  trun_BR$Taxa<-paste0(tree_labels, "(",substr(BRSeqs@ranges@NAMES,1,9),")")
  trun_BR$Seqs<-substr(paste(BRSeqs),trun_BR$S.end,trun_BR$S.start)
  targetDF<-data.frame(Taxa=targetName, Seqs=reverseComplement(refseq))
  GBDF<-rbind.fill(trun_BR,targetDF)
  GBDF<- GBDF %>% distinct(Taxa, .keep_all = TRUE)
  return(GBDF)
}

#Add more targets
add_target<-function(SeqDF,newTar,targetName){
  tar2 <-data.frame(Taxa=targetName, Seqs=reverseComplement(newTar))
  tar2DF <-merge(SeqDF,tar2, all.y = T)
  finalDF<-rbind(SeqDF,tar2DF)
}

#Align sequences 
align_seqs<-function(SeqDF){
  GbkDNA<-sapply(paste(SeqDF$Seqs),strsplit,split="")
  names(GbkDNA)<-paste(SeqDF$Taxa)
  GbkDNA<-as.DNAbin(GbkDNA)
  GbkAlign<-muscle(GbkDNA,quiet=F)
  GbkAlignTrimmed<-trimEnds(GbkAlign)
  return(GbkAlignTrimmed)
} 

#Convert alignment object to phydata type
convert_phyobject<-function(aligned_seqs){
  phy_object<-phyDat(aligned_seqs, type = "DNA")
  return(phy_object)
}

#optimize distance based methods NJ and UPGMA
optimize_db_parsimony<-function(phy_object) {
  dna_dist <- dist.ml(phy_object)
  treeNJ <- NJ(dna_dist)
  treeUPGMA <- upgma(dna_dist)
  if (parsimony(treeNJ,phy_object) < parsimony(treeUPGMA,phy_object)) {
    fit = pml(treeNJ,phy_object)
  } else {
    fit = pml(treeUPGMA,phy_object)
  }
  return(fit)
  
}

#optimize likelihood
optimize_likelihood<-function(phy_object, pml_object) {
  model_test <- modelTest(pml_object)
  model_test <- model_test %>% arrange(logLik)
  params <- strsplit(paste(model_test[nrow(model_test),]$Model),"\\+")
  model <- params[[1]][1]
  Gamma <- FALSE
  Inv <- FALSE
  if (length(params[[1]]) == 2) {
    if (params[[1]][2] == "I") {
      Inv = TRUE
    } else {
      Gamma = TRUE
    }
  } 
  if (length(params[[1]]) == 3) {
    Gamma <- TRUE
    Inv <- TRUE
  }
  print("----------------------------------------------------------------------")
  fit <- optim.pml(pml_object, model = model, optInv = Inv, optGamma = Gamma, rearrangement = "NNI")
  print("----------------------------------------------------------------------")
  print(model_test[nrow(model_test),])
  print(paste0("Gamma = ",Gamma))
  print(paste0("Inv = ", Inv))
  print("----------------------------------------------------------------------")
  print(paste0("Unoptimized loglikelihood: ",pml_object$logLik))
  print("----------------------------------------------------------------------")
  print(paste0("Optimized loglikelihood: ",fit$logLik))
  print("----------------------------------------------------------------------")
  return(fit)
}

#Build phylogenic trees
bootstrap_tree<-function(fitted_model,bs_iterations,scale_bar,out){ 
  bs <- bootstrap.pml(fitted_model, bs=bs_iterations, optNni=TRUE, multicore=F, control = pml.control(trace=0))
  pdf(out,width=13,height=10)
  plotBS(midpoint(fitted_model$tree),bs, p = 70, type="p")
  add.scale.bar(length = scale_bar, cex = 0.9, font = 2)
  dev.off()
}

